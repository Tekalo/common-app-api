---
name: Deploy Image

run-name: Deploy to ${{ inputs.env }}

on:
  workflow_call:
    inputs:
      image:
        description: 'Docker image to deploy'
        type: string
        required: true
      env:
        description: 'Environment to deploy to'
        type: string
        required: true
    secrets:
      TF_API_TOKEN:
        required: true

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: ${{ inputs.env }}
  ECS_CLI_TASK: capp-${{ inputs.env }}-cli
  ECS_API_TASK: capp-${{ inputs.env }}-api

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to ${{ inputs.env }}
    environment:
      name: ${{ inputs.env }}
      url: https://capp.${{ inputs.env }}.apps.futurestech.cloud
    concurrency: ${{ inputs.env }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tf/envs/${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_INFRA }}
          role-session-name: GithubActions

      - name: Get latest image build tag
        id: prev-image
        run: |
          PREV_IMAGE=$(aws ecs describe-task-definition --task-definition "$ECS_API_TASK" | jq -r .taskDefinition.containerDefinitions[0].image)
          echo "prev-image=${PREV_IMAGE}" >> $GITHUB_OUTPUT

      # To update our CLI task. This is a no-op on our API task.
      - name: CLI Terraform Apply
        run: |
          terraform apply -auto-approve -input=false \
            -var 'cli_image=${{ inputs.image }}' \
            -var 'image=${{ steps.prev-image.outputs.prev-image }}'

      - name: Initialize Prisma schema
        id: prisma-init
        run: |
          set -euo pipefail
          run_result=$(aws ecs run-task \
            --cluster "$ECS_CLUSTER" \
            --task-definition "$ECS_CLI_TASK" \
            --overrides '{"containerOverrides": [{"name": "capp-cli", "command": ["pnpm", "prisma", "db", "push"]}]}')
          echo ${run_result}
          container_arn=$(echo $run_result | jq -r '.tasks[0].taskArn')
          aws ecs wait tasks-stopped \
              --cluster "$ECS_CLUSTER" \
              --tasks "${container_arn}"
          exit $(aws ecs describe-tasks \
            --cluster "$ECS_CLUSTER" \
            --tasks "${container_arn}" | jq -r .tasks[0].containers[0].exitCode)

      # Start API task again with our updated database
      - name: API Terraform Apply
        run: |
          terraform apply -auto-approve -input=false \
          -var 'cli_image=${{ inputs.image }}' \
          -var 'image=${{ inputs.image }}'
