---
name: Skills Sync Script

run-name: Run skills sync script in ${{ inputs.env }}

on:
  workflow_dispatch:
    inputs:
      env:
        description: 'Environment to deploy to'
        type: environment
        required: true

env:
  AWS_REGION: us-east-1
  ECS_CLI_TASK: capp-${{ inputs.env }}-cli
  ECS_CLUSTER: ${{ inputs.env }}
  LIGHTCAST_CLIENT_ID: ${{ secrets.LIGHTCAST_CLIENT_ID }}
  LIGHTCAST_CLIENT_SECRET: ${{ secrets.LIGHTCAST_CLIENT_SECRET }}

permissions:
  id-token: write
  contents: read

jobs:
  sync-skills:
    name: Run skills sync script in ${{ inputs.env }}
    concurrency: ${{ inputs.env }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: tf/envs/${{ inputs.env }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: us-east-1
          role-to-assume: "${{ vars[format('{0}_AWS_PLAN_ROLE', inputs.env)] }}"
          role-session-name: GithubActions

      - name: Run sync skills script
        id: sync-skills
        run: |
          set -euo pipefail
          run_result=$(aws ecs run-task \
            --cluster "$ECS_CLUSTER" \
            --task-definition "$ECS_CLI_TASK" \
            --overrides '{"containerOverrides": [{"name": "capp-cli", "command": ["node", "--loader", "ts-node\/esm", "./scripts/skillSync.ts"]}]}' \
          echo ${run_result}
          container_arn=$(echo $run_result | jq -r '.tasks[0].taskArn')
          aws ecs wait tasks-stopped \
              --cluster "$ECS_CLUSTER" \
              --tasks "${container_arn}"
          exit $(aws ecs describe-tasks \
            --cluster "$ECS_CLUSTER" \
            --tasks "${container_arn}" | jq -r .tasks[0].containers[0].exitCode)