// When making any changes to this file you intend to merge into main, make sure to run "pnpm prisma:migrate"

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions","views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext]
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model UTMParams {
  id                    Int                  @id @default(autoincrement())
  event                 String
  params                Json
  applicantSubmission   ApplicantSubmission? @relation(fields: [applicantSubmissionId], references: [id], onDelete: Cascade)
  applicantSubmissionId Int?                 @unique

  applicantDraftSubmission   ApplicantDraftSubmission? @relation(fields: [applicantDraftSubmissionId], references: [id], onDelete: Cascade)
  applicantDraftSubmissionId Int?                      @unique

  opportunityBatch   OpportunityBatch? @relation(fields: [opportunityBatchId], references: [id], onDelete: Cascade)
  opportunityBatchId Int?              @unique

  applicant   Applicant? @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int?       @unique
}

model Applicant {
  id                Int                        @id @default(autoincrement())
  auth0Id           String                     @unique
  name              String
  email             String                     @unique
  phone             String?
  pronoun           String?
  preferredContact  String // enum
  searchStatus      String // Actively looking or not, cadidate open to // enum
  applications      ApplicantSubmission[]
  draftApplications ApplicantDraftSubmission[]
  acceptedTerms     DateTime                   @default(now())
  acceptedPrivacy   DateTime                   @default(now())
  followUpOptIn     Boolean                    @default(false)
  isPaused          Boolean                    @default(false)
  uploads           Upload[]

  utmParams UTMParams?
}

model ApplicantSubmission {
  id Int @id @default(autoincrement())

  utmParams UTMParams?

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  originTag String // Whose link did they click, data attribution  // enum

  resumeUpload   Upload? @relation(fields: [resumeUploadId], references: [id])
  resumeUploadId Int?    @unique
  resumeUrl      String? // TODO: Deprecate
  resumePassword String?

  lastOrg  String // Current or Most Recent Org
  lastRole String // Current or Most Recent Role
  yoe      String // Years of Relevant Experience

  linkedInUrl       String?
  githubUrl         String?
  portfolioUrl      String?
  portfolioPassword String?

  interestEmploymentType  String[] // Interested In - Part time/Full Time    //enum
  interestWorkArrangement String[] // Interested In - Part time role type
  interestRoles           String[] // Interested In - Roles            //enum
  interestCauses          String[] // Interested In - Impact Causes
  interestGovt            Boolean // Interested In - Govt
  interestGovtEmplTypes   String[] // Interested In - Govt Paid/Unpaid //enum

  skills      String[] // Enum or FKs

  currentLocation   String
  openToRelocate    String // enum
  openToRemoteMulti String[] // enum

  desiredSalary            String?
  previousImpactExperience Boolean
  workAuthorization        String? // enum
  hoursPerWeek             String? // Only part-time

  essayResponse String

  referenceAttribution      String? //How did you hear about us  //enum
  referenceAttributionOther String?
}

model ApplicantDraftSubmission {
  id Int @id @default(autoincrement())

  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId Int       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  originTag String? // Whose link did they click, data attribution  // enum

  resumeUpload   Upload? @relation(fields: [resumeUploadId], references: [id])
  resumeUploadId Int?    @unique
  resumeUrl      String? // TODO: Deprecate
  resumePassword String?

  lastOrg  String? // Current or Most Recent Org
  lastRole String? // Current or Most Recent Role
  yoe      String? // Years of Relevant Experience

  linkedInUrl       String?
  githubUrl         String?
  portfolioUrl      String?
  portfolioPassword String?

  interestEmploymentType  String[] // Interested In - Part time/Full Time    //enum
  interestWorkArrangement String[]
  interestRoles           String[] // Interested In - Roles            //enum
  interestCauses          String[] // Interested In - Impact Causes
  interestGovt            Boolean? // Interested In - Govt
  interestGovtEmplTypes   String[] // Interested In - Govt Paid/Unpaid // enum

  skills      String[] // Enum or FKs

  currentLocation   String?
  openToRelocate    String? // enum
  openToRemoteMulti String[] // enum

  desiredSalary            String?
  previousImpactExperience Boolean?
  workAuthorization        String? // enum
  hoursPerWeek             String? // Only part-time

  essayResponse String?

  referenceAttribution      String? //How did you hear about us  //enum
  referenceAttributionOther String?

  utmParams UTMParams?
}

model OpportunityBatch {
  id                        Int                     @id @default(autoincrement())
  opportunitySubmissions    OpportunitySubmission[]
  orgName                   String
  orgType                   String // enum
  orgSize                   String // enum
  impactAreas               String[] // enum
  contactName               String
  contactEmail              String
  contactPhone              String?
  equalOpportunityEmployer  Boolean
  acceptedPrivacy           DateTime                @default(now())
  referenceAttribution      String?
  referenceAttributionOther String?

  utmParams UTMParams?
}

model ApplicantDeletionRequests {
  id              Int      @id @default(autoincrement())
  applicantId     Int
  createdAt       DateTime @default(now())
  email           String
  acceptedTerms   DateTime
  acceptedPrivacy DateTime
  followUpOptIn   Boolean
}

model OpportunitySubmission {
  id Int @id @default(autoincrement())

  opportunityBatch   OpportunityBatch @relation(fields: [opportunityBatchId], references: [id], onDelete: Cascade)
  opportunityBatchId Int

  createdAt      DateTime @default(now())
  source         String // enum
  employmentType String // enum

  paid          Boolean // Whether this is paid or volunteer
  roleType      String
  otherRoleType String?
  salaryRange   String?
  positionTitle String

  fullyRemote     Boolean
  location        String?
  visaSponsorship String?

  desiredHoursPerWeek String?
  desiredStartDate    DateTime?
  desiredEndDate      DateTime?
  desiredYoe          String[] // enum
  desiredSkills       String[] // enum, optional
  desiredImpactExp    String?

  similarStaffed Boolean?

  jdUrl String? // Link to job description

  pitchEssay String // How would you pitch this role in 2 sentences?
}

enum UploadType {
  RESUME
}

enum UploadStatus {
  REQUESTED
  SUCCESS
  FAILURE
}

model Upload {
  id                       Int                       @id @default(autoincrement())
  applicant                Applicant                 @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  applicantId              Int
  type                     UploadType
  originalFilename         String
  createdAt                DateTime                  @default(now())
  completedAt              DateTime?
  contentType              String
  status                   UploadStatus              @default(REQUESTED)
  ApplicantSubmission      ApplicantSubmission?
  ApplicantDraftSubmission ApplicantDraftSubmission?
}

// Custom skills submitted in applicant submissions
model ApplicantSkills {
  name                       String                  @id @db.Citext
  createdAt                  DateTime                @default(now())
}

// Custom skills submitted in opportunity submissions
model OpportunitySkills {
  name                       String                  @id @db.Citext
  createdAt                  DateTime                @default(now())
}

// Imported skills from 3rd party sources (at time of writing, Lightcast)
model ReferenceSkills {
  referenceId              String                    @id
  name                     String                    @db.Citext
}

model SkillsAnnotation {
  name                    String                    @id @db.Citext
  canonical               String?                   @db.Citext
  suggest                 Boolean?
  rejectAs                String?
  priority                Boolean?
}

view SkillsView {
  name String @id @db.Citext
  canonical String? @db.Citext
  suggest Boolean?
  rejectAs String?
  priority Boolean?
}

model CausesAnnotation {
  name                    String                    @id @db.Citext
  canonical               String?                   @db.Citext
  suggest                 Boolean?
  rejectAs                String?
  priority                Boolean?
}

view CausesView {
  name String @id @db.Citext
  canonical String? @db.Citext
  suggest Boolean?
  rejectAs String?
  priority Boolean?
}

// Custom impact causes submitted in applicant submissions
model ApplicantCauses {
  name                       String                  @id @db.Citext
  createdAt                  DateTime                @default(now())
}

// Custom impact causes submitted in opportunity submissions
model OpportunityCauses {
  name                       String                  @id @db.Citext
  createdAt                  DateTime                @default(now())
}
