generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Applicant {
    id               Int                   @id @default(autoincrement())
    auth0Id          String                @unique
    name             String
    email            String                @unique
    phone            String?
    pronoun          String?
    preferredContact String // enum
    searchStatus     String // Actively looking or not, cadidate open to // enum
    applications     ApplicantSubmission[]
    draftApplications     ApplicantDraftSubmission[]
    acceptedTerms    DateTime              @default(now())
    acceptedPrivacy  DateTime              @default(now())
}

model ApplicantSubmission {
    id Int @id @default(autoincrement())

    applicant   Applicant @relation(fields: [applicantId], references: [id])
    applicantId Int       @unique

    createdAt DateTime @default(now())
    originTag String // Whose link did they click, data attribution  // enum

    resumeUrl      String?
    resumePassword String?

    lastOrg  String // Current or Most Recent Org
    lastRole String // Current or Most Recent Role
    yoe      String // Years of Relevant Experience

    linkedInUrl       String?
    githubUrl         String?
    portfolioUrl      String?
    portfolioPassword String?

    interestEmploymentType String[] // Interested In - Opportunities    //enum
    interestRoles          String[] // Interested In - Roles            //enum
    interestCauses         String[] // Interested In - Impact Causes   //enum
    interestGovt           Boolean // Interested In - Govt

    otherCause  String? // Additional cause(s) they are interested in
    skills      String[] // Enum or FKs
    otherSkills String[] // Additional skill(s) they have

    currentLocation String
    openToRelocate  String // enum
    openToRemote    String // enum

    desiredSalary            String?
    previousImpactExperience Boolean
    workAuthorization        String // enum
    hoursPerWeek             String? // Only part-time

    essayResponse String

    referenceAttribution String? //How did you hear about us  //enum
}

model ApplicantDraftSubmission {
    id Int @id @default(autoincrement())

    applicant   Applicant @relation(fields: [applicantId], references: [id])
    applicantId Int       @unique

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    originTag String? // Whose link did they click, data attribution  // enum

    resumeUrl      String?
    resumePassword String?

    lastOrg  String? // Current or Most Recent Org
    lastRole String? // Current or Most Recent Role
    yoe      String? // Years of Relevant Experience

    linkedInUrl       String?
    githubUrl         String?
    portfolioUrl      String?
    portfolioPassword String?

    interestEmploymentType String[] // Interested In - Opportunities    //enum
    interestRoles          String[] // Interested In - Roles            //enum
    interestCauses         String[] // Interested In - Impact Causes   //enum
    interestGovt           Boolean? // Interested In - Govt

    otherCause  String? // Additional cause(s) they are interested in
    skills      String[] // Enum or FKs
    otherSkills String[] // Additional skill(s) they have

    currentLocation String?
    openToRelocate  String? // enum
    openToRemote    String? // enum

    desiredSalary            String?
    previousImpactExperience Boolean?
    workAuthorization        String? // enum
    hoursPerWeek             String? // Only part-time

    essayResponse String?

    referenceAttribution String? //How did you hear about us  //enum
}

model OpportunityBatch {
    id                     Int                     @id @default(autoincrement())
    opportunitySubmissions OpportunitySubmission[]
    orgName                String
    orgType                String // enum
    orgSize                String // enum
    impactAreas            String[] // enum
    contactName            String
    contactEmail           String
    contactPhone           String
}

model ApplicantDeletionRequests {
    id              Int      @id @default(autoincrement())
    applicantId     Int      @unique
    dateAdded       DateTime @default(now())
    email           String
    auth0Id         String
    acceptedTerms   DateTime
    acceptedPrivacy DateTime
}

model OpportunitySubmission {
    id Int @id @default(autoincrement())

    opportunityBatch   OpportunityBatch @relation(fields: [opportunityBatchId], references: [id])
    opportunityBatchId Int

    dateAdded      DateTime @default(now())
    source         String // enum
    employmentType String // enum
    hoursPerWeek   String? // Only part-time

    paid        Boolean // Whether this is paid or volunteer
    roleType    String?
    salaryRange String?

    location        String
    visaSponsorship String?

    desiredStartDate   DateTime?
    desiredEndDate     DateTime?
    desiredYoe         String[] // enum
    desiredSkills      String[] // enum, optional
    desiredSkillsOther String[] // optional
    desiredImpactExp   String?

    similarStaffed Boolean?

    jdUrl String? // Link to job description

    pitchEssay String // How would you pitch this role in 2 sentences?
}
